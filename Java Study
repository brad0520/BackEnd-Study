기본타입
	• 정수타입 : byte, char, short, int, long
	• 실수타입 : float, long
	• 논리 타입 : boolean
	• 실제 값을 변수 안에 저장

참조타입
	• 객체의 번지를 참조하는 타입 : 배열, 열거, 클래스, 인터페이스
	• 메모리의 번지를 변수 안에 저장
	• 참조변수는 null로 초기화가 가능

메모리 사용 영역
	• 메소드 영역 : 시작시 생성되고 모든 스레드가 공유하는 영역
		○ 클래스 : 정적필드/상수, 메소드 코드, 생성자 코드
	• 힙영역 : 객체와 배열이 생성되는 영역
		○ new 연산자는 힙 영역에 새로은 객체를 만들 때 사용함
	• JVM 스택 영역 : 메소드를 호출할 때마다 프레임을 추가(psuh)하고 메소드가 종료되면 해당 프레임을 제거(pop)하는 동작을 수행
	• NullPointerException : null상태에서 있지도 않은 객체의 데이터(필드)나 메소드를 사용하는 코드를 실행하면 발생하는 오류
	• 객체 비교가 아닌 내부 문자열을 직접 비교하고자 할 때는 equals() 메소드를 사용

배열 생성
	• 배열 변수를 이미 선안한 후에는 다른 실행문에서 중괄호를 사용한 값의 목록으로 배열 객체를 생성할 수 없음
	• new연산자로 변수를 선언한 배열을 생성

패키지 : 물리적으로는 폴더, 클래스가 포함된 경로로 클래스의 일부분으로 역할, '.' 으로 구분

메서드로 만드는 방법으로 만들고자 하는 코드들을 선택하고 리펙터 기능을 통해 구현 가능

메인클래스가 있는 java 파일에서 메서드와 필드를 묶은 클래스를 새로 구성할 경우 리펙터 기능을 활용하여 새로운 class java 파일을 생성할 수 있음

예외의 처리 : try catch 구문 활용

예외 사유 출력은 e.printStackTrace() 사용

단축키 
	- ctrl+D : 한 줄 삭제
	- ctrl+alt+down : 행단위 복사
	- alt+shift+A : 멀티컬럼 편집
	- ctrl+i : 자동 들여쓰기
	- alt+up, down : 행단위 이동

 열거타입 선언 : public enum 열거타입 { } , New / Emun (Interface 아래에 위치)

String 에 ""를 대입하는 경우와 null값을 대입하는 경우는 차이가 있음을 주의

Scanner sc = new java.util.Scanner(System.in);
String command = sc.next();
에서 next 대신 nextLine 을 사용할 경우 이전 입력 값에 엔터값이 남아있는 경우 이 데이터를 우선인식하는 오류가 발생할 수 있음: 그래서 하나의 값을 입력받을 경우 next를 사용해야 오류가 발생하지 않음.

긴 코드를 화면에 맞게 줄바꿈 하는 단축키 : alt + shift + y

import가 필요한 경우 자동으로 import 구문을 입력하는 단축키 : ctl + shift + o

Vector 배열 : 가변 배열로 기능하여 배열의 인덱스를 관리하지 않아도 자동으로 추가해줌, 모든 종류의 객체를 가능함

여러 종류의 객체를 배열로 다룰 때 조상타입의 배열에 자손들의 객체를 담을 수 있음

    

